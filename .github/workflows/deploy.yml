name: Deploy

on:
  workflow_dispatch:

jobs:
  deployAcm:
    name: Deploy Acm
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy ACM Cloudformation Template
      run: >
        aws cloudformation deploy --template-file ./acm.yml --stack-name personal-website-acm
        --no-execute-changeset --no-fail-on-empty-changeset
        --tags owner=${{ secrets.AWS_CERTIFICATE_OWNER }} ownerEmail=${{ secrets.AWS_CERTIFICATE_OWNER_EMAIL }} environment=production
        --parameter-overrides r53ZoneId=${{ secrets.AWS_R53_HOSTED_ZONE_ID }} owner=${{ secrets.AWS_CERTIFICATE_OWNER }} ownerEmail=${{ secrets.AWS_CERTIFICATE_OWNER_EMAIL }} environment=production
         
    - name: Wait Cloudformation Exists
      run: aws cloudformation wait stack-exists --stack-name personal-website-acm
      
    - name: Update Termination protection from cloudformation template
      run: >
        aws cloudformation update-termination-protection --stack-name personal-website-acm
        --enable-termination-protection

  deployS3:
    name: Deploy S3
    needs: deployAcm
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy S3 Cloudformation Template
      run: >
        aws cloudformation deploy --template-file ./s3.yml --stack-name personal-website-s3 
        --no-execute-changeset --no-fail-on-empty-changeset
        --tags owner=${{ secrets.AWS_CERTIFICATE_OWNER }} ownerEmail=${{ secrets.AWS_CERTIFICATE_OWNER_EMAIL }} environment=production
        --parameter-overrides owner=${{ secrets.AWS_CERTIFICATE_OWNER }} ownerEmail=${{ secrets.AWS_CERTIFICATE_OWNER_EMAIL }} environment=production
                 
    - name: Wait Cloudformation Exists
      run: aws cloudformation wait stack-exists --stack-name personal-website-s3
      
    - name: Update Termination protection from cloudformation template
      run: >
        aws cloudformation update-termination-protection --stack-name personal-website-s3
        --enable-termination-protection

  deployCloudFront:
    name: Deploy CloudFront Distribuition
    needs: deployS3
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy CloudFront
      run: >
        aws cloudformation deploy --template-file ./cloudfront.yml --stack-name personal-website-cloudfront 
        --no-execute-changeset --no-fail-on-empty-changeset
        --tags owner=${{ secrets.AWS_CERTIFICATE_OWNER }} ownerEmail=${{ secrets.AWS_CERTIFICATE_OWNER_EMAIL }} environment=production
        --parameter-overrides owner=${{ secrets.AWS_CERTIFICATE_OWNER }} ownerEmail=${{ secrets.AWS_CERTIFICATE_OWNER_EMAIL }} environment=production
                 
    - name: Wait Cloudformation Exists
      run: aws cloudformation wait stack-exists --stack-name personal-website-s3
      
    - name: Update Termination protection from cloudformation template
      run: >
        aws cloudformation update-termination-protection --stack-name personal-website-s3
        --enable-termination-protection
